
import cv2
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os

dispW=1280
dsipH=720
flip=2




import cv2

cam = cv2.VideoCapture(0)

cv2.namedWindow("test")

img_counter = 0

while True:
    ret, frame = cam.read()
    if not ret:
        print("failed to grab frame")
        break
    cv2.imshow("test", frame)

    k = cv2.waitKey(1)
    if k%256 == 27:
        # ESC pressed
        print("Escape hit, closing...")
        break
    elif k%256 == 32:
        # SPACE pressed
        user_input = "opencv_frame_{}.png".format(img_counter)
        cv2.imwrite(user_input, frame)
        print("{} written!".format(user_input))
        img_counter += 1

cam.release()

cv2.destroyAllWindows()

loaded_model = tf.keras.models.load_model('model_x.h5')
to_predict = cv2.imread(str(user_input))
imge = cv2.cvtColor(to_predict,cv2.COLOR_BGR2RGB)
resized = cv2.resize(imge,(224,224), interpolation = cv2.INTER_AREA)
pred_img = np.array(resized) / 255.0
pred_img = pred_img.reshape((1,224,224,3))
classes = loaded_model.predict(pred_img,batch_size=1)
pred = np.argmax(classes, axis=1)

os.system('clear')
if classes[0] > 0.5:
    result = 'Positive'
    print('THE RESULT IS POSITIVE')
else:
    result = 'Negative'
    print('THE RESULT IS NEGATIVE')
plt.imshow(to_predict,'gray')
plt.title('Result: '+ str(result))
plt.axis('off')
plt.show()